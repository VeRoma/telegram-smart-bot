require("dotenv").config();
const { OpenAI } = require("openai");
const { Telegraf } = require("telegraf");
const { message } = require("telegraf/filters");
// const axios = require("axios");
// const fs = require('fs');
// const path = require('path');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI —á–µ—Ä–µ–∑ apiKey
const client = new OpenAI({
	apiKey: process.env.OPENAI_API_KEY,
});

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const userHistories = new Map();

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ç–∞–π–º–µ—Ä–æ–≤
const userIntervals = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
const requestOpenAI = async (messages, model = "gpt-4-turbo") => {
	let responseText = "";
	const stream = await client.chat.completions.create({
		model: model,
		messages: messages,
		stream: true,
	});
	for await (const chunk of stream) {
		responseText += chunk.choices[0]?.delta?.content || "";
	}
	return responseText;
};

// –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
	try {
		const botToken = process.env.BOT_TOKEN;
		if (!botToken) {
			throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
		}

		const bot = new Telegraf(botToken);

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		const sendMessageToUser = async (chatId, message) => {
			try {
				await bot.telegram.sendMessage(chatId, message);
				console.log(`Message sent to chat ${chatId}: ${message}`);
			} catch (error) {
				console.error(
					`Failed to send message to chat ${chatId}: ${error.message}`
				);
			}
		};

		// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
		const startSendingMessages = (chatId, message, interval) => {
			const intervalId = setInterval(() => {
				sendMessageToUser(chatId, message);
			}, interval);

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–π–º–µ—Ä–∞
			userIntervals.set(chatId, intervalId);
		};

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
		const stopSendingMessages = (chatId) => {
			const intervalId = userIntervals.get(chatId);
			if (intervalId) {
				clearInterval(intervalId);
				userIntervals.delete(chatId);
				console.log(`Stopped sending messages to chat ${chatId}`);
			}
		};

		// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ DALL-E 3
		const requestDalle = async (prompt) => {
			const response = await client.images.generate({
				prompt: prompt,
				n: 1, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
				size: "512x512", // —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
			});

			return response.data[0].url;
		};

		// ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Ç–µ ===========

		bot.start((ctx) => {
			ctx.reply("Welcome");
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /startTimer
		bot.command("startTimer", (ctx) => {
			const chatId = ctx.chat.id;
			const interval = 5000; // 1 –º–∏–Ω—É—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
			const message = `–≠—Ç–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é: ${interval} –ºc.`;

			// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
			startSendingMessages(chatId, message, interval);

			ctx.reply(
				`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å—é: ${interval} –ºc.`
			);
		});

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
		bot.command("stopTimer", (ctx) => {
			const chatId = ctx.chat.id;

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
			stopSendingMessages(chatId);

			ctx.reply("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¢–∞–π–º–µ—Ä—É –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
		});

		bot.on("text", async (ctx) => {
			const userId = ctx.message.from.id;
			const userQuestion = ctx.message.text;

			console.log("Question:", userQuestion);

			// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
			let userHistory = userHistories.get(userId) || [];

			// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
			userHistory.push({ role: "user", content: userQuestion });

			try {
				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
				const responseText = await requestOpenAI(userHistory);
				console.log("Answer:", responseText);

				// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
				userHistory.push({ role: "assistant", content: responseText });

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
				userHistories.set(userId, userHistory);

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				await ctx.reply(responseText);
			} catch (error) {
				await ctx.reply(
					"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ OpenAI API: " +
						error.message
				);
			}
		});

		bot.help((ctx) => ctx.reply("Send me a sticker"));
		bot.on(message("sticker"), (ctx) => ctx.reply("üëç"));

		/*	bot.on(message("photo"), async (ctx) => {
			// const photo = ctx.message.photo.pop();
			// const fileId = photo.file_id;
			// const file = await bot.telegram.getFile(fileId);
			// const fileUrl = `https://api.telegram.org/file/bot${botToken}/${file.file_path}`;

			// console.log("Received photo URL:", fileUrl);

			// –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
			// const filepath = path.join(__dirname, 'temp.jpg');
			// await downloadImage(fileUrl, filepath);

			// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

			// –ü—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è DALL-E 3
			// const prompt = `–Ω–∞—Ä–∏—Å—É–π –∑–Ω–∞–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –∏–∑ –∫—Ä–∞—Å–Ω–æ–π –ª–µ–Ω—Ç—ã, –≤–∏–∑—É–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω—è—é—â–µ–π—Å—è —à–∏—Ä–∏–Ω—ã, –ª–µ–≤–∞—è —á–∞—Å—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–π –≤ 1.5-2 —Ä–∞–∑–∞. –ª–æ–≥–æ—Ç–∏–ø –Ω–∞ —Ç—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω–æ–º —Ñ–æ–Ω–µ`;
			const prompt = `draw openai logo`;

			try {
				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç DALL-E 3
				const imageUrl = await requestDalle(prompt);
				// console.log("Generated Image URL:", imageUrl);

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
				await ctx.replyWithPhoto(imageUrl);
			} catch (error) {
				await ctx.reply(
					"–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ OpenAI API: " +
						error.message
				);
			}
		});		//	*/

		bot.launch();

		// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
		process.once("SIGINT", () => bot.stop("SIGINT"));
		process.once("SIGTERM", () => bot.stop("SIGTERM"));
	} catch (error) {
		console.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", error);
	}
}

// –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main();
